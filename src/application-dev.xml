<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 注解开发适配器 -->
	<mvc:annotation-driven />
	<!-- 拦截器 -->
	<mvc:interceptors>    
	    <mvc:interceptor>    
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	        <mvc:mapping path="/**" />  
	        <!-- /login 不需要拦截-->
	        <mvc:exclude-mapping path="/user/checkLogin" />
	        <bean class="com.sankexing.interceptor.TokenInterceptor"></bean>    
	    </mvc:interceptor>  
    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
    </mvc:interceptors> 
	<!-- 配置视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- 为响应的视图名称加上前缀 -->
		<property name="prefix" value="/" />
		<!-- 为响应的视图名称加上后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/chinese_food" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
	</bean>
	<!-- 根据mybatis的配置文件 来创建sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 通用属性 -->
		<property name="typeAliasesPackage" value="com.sankexing.entity" />
		<!-- 映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/sankexing/mapper/FoodMapper.xml</value>
				<value>classpath:com/sankexing/mapper/UserMapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- mapper的接口和mapper的映射文件在同一个包下，并且 mapper的接口名称和mapper的映射文件名相同 mapper接口中的方法名称和mapper映射文件中的id的名称一致 
		mapper映射文件中的namespace和mapper文件所在的包名+mapper文件名 该类将扫描指定的包 并且通过代理生成mapper接口的实现类 
		生成的类的id名称为 mapper接口首字母小写 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="basePackage" value="com.sankexing.mapper" />
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="2097152"></property>
	</bean>

	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 表示以save开头的方法都需要事务 propagation 表示事务的传播特性 REQUIRED 查看当前是否有事务，如果有，使用当前事务，如果没有开启新事务 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" />  
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!--expression 指明事务在哪里起作用 第一个* 表示所有返回值 第二个* 表示所有类 第三个* 表示类中的所有方法 .. 表示所有参数 -->
		<aop:pointcut expression="execution(* com.sankexing.service.impl.*.*(..))"
			id="pointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	<context:component-scan base-package="com.sankexing"></context:component-scan>
</beans>